// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: people.proto

#include "people.pb.h"
#include "people.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace student {

static const char* ManagementSystem_method_names[] = {
  "/student.ManagementSystem/AddStudent",
  "/student.ManagementSystem/SearchAge",
};

std::unique_ptr< ManagementSystem::Stub> ManagementSystem::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ManagementSystem::Stub> stub(new ManagementSystem::Stub(channel, options));
  return stub;
}

ManagementSystem::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AddStudent_(ManagementSystem_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchAge_(ManagementSystem_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ManagementSystem::Stub::AddStudent(::grpc::ClientContext* context, const ::student::AddStudentRequest& request, ::student::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::student::AddStudentRequest, ::student::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddStudent_, context, request, response);
}

void ManagementSystem::Stub::async::AddStudent(::grpc::ClientContext* context, const ::student::AddStudentRequest* request, ::student::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::student::AddStudentRequest, ::student::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddStudent_, context, request, response, std::move(f));
}

void ManagementSystem::Stub::async::AddStudent(::grpc::ClientContext* context, const ::student::AddStudentRequest* request, ::student::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddStudent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::student::Empty>* ManagementSystem::Stub::PrepareAsyncAddStudentRaw(::grpc::ClientContext* context, const ::student::AddStudentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::student::Empty, ::student::AddStudentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddStudent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::student::Empty>* ManagementSystem::Stub::AsyncAddStudentRaw(::grpc::ClientContext* context, const ::student::AddStudentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddStudentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagementSystem::Stub::SearchAge(::grpc::ClientContext* context, const ::student::SearchAgeRequest& request, ::student::SearchAgeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::student::SearchAgeRequest, ::student::SearchAgeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchAge_, context, request, response);
}

void ManagementSystem::Stub::async::SearchAge(::grpc::ClientContext* context, const ::student::SearchAgeRequest* request, ::student::SearchAgeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::student::SearchAgeRequest, ::student::SearchAgeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchAge_, context, request, response, std::move(f));
}

void ManagementSystem::Stub::async::SearchAge(::grpc::ClientContext* context, const ::student::SearchAgeRequest* request, ::student::SearchAgeReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchAge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::student::SearchAgeReply>* ManagementSystem::Stub::PrepareAsyncSearchAgeRaw(::grpc::ClientContext* context, const ::student::SearchAgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::student::SearchAgeReply, ::student::SearchAgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchAge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::student::SearchAgeReply>* ManagementSystem::Stub::AsyncSearchAgeRaw(::grpc::ClientContext* context, const ::student::SearchAgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchAgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

ManagementSystem::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagementSystem_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagementSystem::Service, ::student::AddStudentRequest, ::student::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagementSystem::Service* service,
             ::grpc::ServerContext* ctx,
             const ::student::AddStudentRequest* req,
             ::student::Empty* resp) {
               return service->AddStudent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagementSystem_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagementSystem::Service, ::student::SearchAgeRequest, ::student::SearchAgeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagementSystem::Service* service,
             ::grpc::ServerContext* ctx,
             const ::student::SearchAgeRequest* req,
             ::student::SearchAgeReply* resp) {
               return service->SearchAge(ctx, req, resp);
             }, this)));
}

ManagementSystem::Service::~Service() {
}

::grpc::Status ManagementSystem::Service::AddStudent(::grpc::ServerContext* context, const ::student::AddStudentRequest* request, ::student::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagementSystem::Service::SearchAge(::grpc::ServerContext* context, const ::student::SearchAgeRequest* request, ::student::SearchAgeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace student

